using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Numerics;

namespace _029_Distinct_powers
{
    class Program
    {
        static void Main(string[] args)
        {
            //Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

            //    2^2=4,  2^3=8,   2^4=16,  2^5=32
            //    3^2=9,  3^3=27,  3^4=81,  3^5=243
            //    4^2=16, 4^3=64,  4^4=256, 4^5=1024
            //    5^2=25, 5^3=125, 5^4=625, 5^5=3125

            //If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

            //4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

            //How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

            List<BigInteger> powers = DistinctPowers(5);
            powers = powers.Distinct().ToList();
            powers.Sort();

            foreach (int n in powers)
            {
                Console.Write(n + " ");
            }
            Console.WriteLine();
            Console.WriteLine("{0} distinct powers", powers.Count);
            Console.WriteLine();

            powers = DistinctPowers(100);
            powers = powers.Distinct().ToList();
            powers.Sort();
            Console.WriteLine("{0} distinct powers", powers.Count);
            

            Console.Read();

        }

        public static List<BigInteger> DistinctPowers(int n)
        {
            List<BigInteger> powers = new List<BigInteger>();
            for (int a = 2; a <= n; a++)
            {
                for (int b = 2; b <= n; b++)
                {
                    BigInteger power = (BigInteger)Math.Pow(a, b);
                    powers.Add(power);
                }
                //Console.WriteLine("iteration {0} of {1}", a, n);
            }
            return powers;
        }
    }
}
